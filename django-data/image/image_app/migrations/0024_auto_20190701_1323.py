# -*- coding: utf-8 -*-
# Generated by Django 1.11.21 on 2019-07-01 11:23
from __future__ import unicode_literals
import logging

from django.db import migrations

from common.constants import SAMPLE_STORAGE, SAMPLE_STORAGE_PROCESSING

# Get an instance of a logger
logger = logging.getLogger(__name__)


def convert_storage(apps, schema_editor):
    """read from storage field and set data to storage_new"""

    # When using multiple databases, you may need to figure out whether or
    # not to run a migration against a particular database. For example,
    # you may want to only run a migration on a particular database.
    # whithout the following condition, I will fail tests during migrations,
    # while default database works as expected
    if schema_editor.connection.alias != 'default':
        return

    Sample = apps.get_model('image_app', 'Sample')

    for sample in Sample.objects.all():
        if sample.storage is None:
            continue

        try:
            storage_new = SAMPLE_STORAGE.get_value_by_desc(sample.storage)
            sample.storage_new = storage_new
            sample.save()

        except KeyError as e:
            # ignore this update
            logger.warning("Ignoring %s" % (e))
            continue


def convert_storage_processing(apps, schema_editor):
    """
    read from storage_processing field and set data to storage_processing_new
    """

    if schema_editor.connection.alias != 'default':
        return

    Sample = apps.get_model('image_app', 'Sample')

    for sample in Sample.objects.all():
        if sample.storage_processing is None:
            continue

        try:
            storage_processing_new = \
                SAMPLE_STORAGE_PROCESSING.get_value_by_desc(
                    sample.storage_processing)
            sample.storage_processing_new = storage_processing_new
            sample.save()

        except KeyError as e:
            # ignore this update
            logger.warning("Ignoring %s" % (e))
            continue


class Migration(migrations.Migration):

    dependencies = [
        ('image_app', '0023_auto_20190701_1317'),
    ]

    operations = [
        migrations.RunPython(convert_storage),
        migrations.RunPython(convert_storage_processing),
    ]
